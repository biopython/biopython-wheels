environment:
  global:
    REPO_DIR: biopython
    PACKAGE_NAME: biopython
    # biopython-177 (not yet tagged):
    BUILD_COMMIT: adac231c9b1470a7f8036876d5d02959554c1bbb
    BIOPYTHON_STAGING_UPLOAD_TOKEN:
      secure: sulPawBUvpS2XWg79MIKiFINMnlPv6BbBcC4rXhcXNEIJIOufv0Ve+VYTbUPHfgv

  matrix:
    - PYTHON: "C:\\Python38"
      TEST_DEPENDS: "numpy==1.17.3"
    - PYTHON: "C:\\Python38-x64"
      TEST_DEPENDS: "numpy==1.17.3"
    - PYTHON: "C:\\Python37"
      TEST_DEPENDS: "numpy==1.14.5"
    - PYTHON: "C:\\Python37-x64"
      TEST_DEPENDS: "numpy==1.14.5"
    - PYTHON: "C:\\Python36"
      TEST_DEPENDS: "numpy==1.12.0"
    - PYTHON: "C:\\Python36-x64"
      TEST_DEPENDS: "numpy==1.12.0"

matrix:
    fast_finish: false  # for testing

install:
    # Fetch submodules
    - git submodule update --init --recursive

    # Install new Python if necessary
    - ps: .\multibuild\install_python.ps1

    # Prepend newly installed Python to the PATH of this build (this cannot be
    # done from inside the powershell script as it would require to restart
    # the parent CMD process).
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
    - python -m pip install -U pip setuptools

    # Fix MSVC builds for 64-bit Python. See:
    # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
    - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
    # Build wheel
    - python -m pip install wheel
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - cd ..

test_script:
    # create test env
    - virtualenv --python %PYTHON%\Python.exe test_env
    - test_env\Scripts\activate.bat
    - where python
    - python -m pip install %TEST_DEPENDS%

    # install from wheel
    - python -m pip install --pre --no-index --find-links %REPO_DIR%\dist\ %PACKAGE_NAME%

    # Change into an innocuous directory and find tests from installation
    - mkdir for_testing
    - cd for_testing
    - "python -c \"import Bio; print('Biopython version ' + Bio.__version__)\""
    # This will confirm some of our C code compiled fine:
    - "python -c \"from Bio.Nexus import cnexus; from Bio import cpairwise2\""
    - "python -c \"from Bio import Cluster; print('Bio.Cluster version ' + Cluster.__version__)\""
    # Now let's run our full test suite...
    # We want to do this using the Biopython installed from the wheel,
    # so just want the Tests (and Doc) folders present here:
    - mv ..\\%REPO_DIR%\\Tests Tests
    - mv ..\\%REPO_DIR%\\Doc Doc
    - cd Tests
    # Disable alignment tutorial doctest failure specfic to Windows
    - rm ..\\Doc\\Tutorial\\chapter_align.tex
    # Disable two more platform specific failures
    - "sed -i.tmp 's#def test_WellRecord#def no_test_WellRecord#g' test_phenotype.py"
    - "sed -i.tmp 's#def test_phenotype_IO#def no_test_phenotype_IO#g' test_phenotype.py"
    - "python run_tests.py --offline"
    - cd ../..

artifacts:
    - path: "%REPO_DIR%\\dist\\*"

on_success:
    # Upload wheels to anaconda for staging before PyPI, using shared
    # infrastructure at https://anaconda.org/multibuild-wheels-staging
    # The secret token is defined in the AppVeyor configuration
    # from https://anaconda.org/scipy-wheels-nightly/settings/access
    - python -m pip install git+https://github.com/Anaconda-Server/anaconda-client.git
    - IF NOT "%BIOPYTHON_STAGING_UPLOAD_TOKEN%" == "" anaconda -t %BIOPYTHON_STAGING_UPLOAD_TOKEN% upload --force --no-progress -u "multibuild-wheels-staging" "dist\*.whl"
