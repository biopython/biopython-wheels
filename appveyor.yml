environment:
  global:
    REPO_DIR: biopython
    PACKAGE_NAME: biopython
    BUILD_COMMIT: biopython-170
    WHEELHOUSE_UPLOADER_USERNAME: travis-worker
    WHEELHOUSE_UPLOADER_SECRET:
        secure:
            rGyl1dSDGB0VGdWO6GVnSRDfbsXxqENaRXRWFjRI91hOQVbgcmYphSQ+wNBzO1LB

    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\multibuild\\ci\\appveyor\\windows_sdk.cmd"

  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      BUILD_DEPENDS: "numpy==1.8.0"
      TEST_DEPENDS: "numpy==1.8.0"
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      BUILD_DEPENDS: "numpy==1.8.0"
      TEST_DEPENDS: "numpy==1.8.0"
    - PYTHON: "C:\\Miniconda3"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      BUILD_DEPENDS: "numpy==1.9.0"
      TEST_DEPENDS: "numpy==1.9.0"
    - PYTHON: "C:\\Miniconda3-x64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      BUILD_DEPENDS: "numpy==1.9.0"
      TEST_DEPENDS: "numpy==1.9.0"
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
      BUILD_DEPENDS: "numpy==1.10.1"
      TEST_DEPENDS: "numpy==1.10.1"
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      BUILD_DEPENDS: "numpy==1.10.1"
      TEST_DEPENDS: "numpy==1.10.1"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
      BUILD_DEPENDS: "numpy==1.12.0"
      TEST_DEPENDS: "numpy==1.12.0"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      BUILD_DEPENDS: "numpy==1.12.0"
      TEST_DEPENDS: "numpy==1.12.0"


# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

matrix:
    fast_finish: true

install:
    # Fetch submodules
    - git submodule update --init --recursive

    # Install miniconda
    - ps: .\\multibuild\\ci\\appveyor\\install.ps1
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - conda info

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
    # Install build requirements
    - conda install --yes %BUILD_DEPENDS%

    # build wheel:
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - "%CMD_IN_ENV% python setup.py bdist_wheel"

test_script:
    # create test env
    - conda create --yes -n test_env python=%PYTHON_VERSION% %TEST_DEPENDS%
    - activate test_env

    # install from wheel
    - pip install --no-index --find-links dist/ %PACKAGE_NAME%

    # run test from installed wheel.
    - cd ..
    # The test try to run cython/msvc so CMD_IN_ENV is needed
    - "%CMD_IN_ENV% python -c \"import Bio; print('Biopython version ' + Bio.__version__)\""
    # This will confirm some of our C code compiled fine:
    - "%CMD_IN_ENV% python -c \"from Bio.Nexus import cnexus; from Bio import cpairwise2\""
    - "%CMD_IN_ENV% python -c \"from Bio import Cluster; print('Bio.Cluster version ' + Cluster.version())\""
    # Now let's run our full test suite...
    # We want to do this using the Biopython installed from the wheel,
    # so just want the Tests (and Doc) folders present here:
    - mv %REPO_DIR%\\Tests Tests
    - mv %REPO_DIR%\\Doc Doc
    - cd Tests
    # Disable doctest which breaks under 64-bit Python 2.7
    - "sed -i.tmp 's:\"Bio.Affy.CelFile\",:# Skip Bio.Affy.CelFile:g' run_tests.py"
    # Disable int vs long tutorial doctest which breaks under 32-bit Python 3.5
    - rm ..\\Doc\\Tutorial\\chapter_phenotype.tex
    # Disable two more platform specific failures
    - "sed -i.tmp 's#def test_WellRecord#def no_test_WellRecord#g' test_phenotype.py"
    - "sed -i.tmp 's#def test_phenotype_IO#def no_test_phenotype_IO#g' test_phenotype.py"
    - "%CMD_IN_ENV% python run_tests.py --offline"
    - cd ..

artifacts:
    - path: "%REPO_DIR%\\dist\\*"

on_success:
  # Report checksums
  # - md5sum %REPO_DIR%\\dist\\%PACKAGE_NAME%*
  # - sha256sum %REPO_DIR%\\dist\\%PACKAGE_NAME%*
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - pip install wheelhouse-uploader
  - "python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=%REPO_DIR%\\dist --no-update-index wheels"
