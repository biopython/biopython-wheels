env:
    global:
        - REPO_DIR=biopython
        # Commit from your-project that you want to build
        # biopython-178 (not yet tagged):
        - BUILD_COMMIT=23b7548dbf1365f2f134695c7007af3f86af5dc0
        - PLAT=x86_64
        - UNICODE_WIDTH=32

language: python
dist: bionic
services: docker
os: linux

jobs:
  include:
      # add osx first into the queue as they have lower parallelism
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.6
        - TEST_DEPENDS="numpy==1.12.0"
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.7
        - TEST_DEPENDS="numpy==1.14.5"
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.8
        - TEST_DEPENDS="numpy==1.17.3"
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.9
        - TEST_DEPENDS="numpy==1.20"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - TEST_DEPENDS="numpy==1.12.0"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
        - TEST_DEPENDS="numpy==1.12.0"
    - os: linux
      arch: arm64
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=aarch64
        - MB_ML_VER=2014
        - DOCKER_TEST_IMAGE=multibuild/xenial_{PLAT}
        - TEST_DEPENDS="numpy==1.19.0"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - TEST_DEPENDS="numpy==1.14.5"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
        - TEST_DEPENDS="numpy==1.14.5"
    - os: linux
      arch: arm64
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=aarch64
        - MB_ML_VER=2014
        - DOCKER_TEST_IMAGE=multibuild/xenial_{PLAT}
        - TEST_DEPENDS="numpy==1.19.3"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - TEST_DEPENDS="numpy==1.17.3"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686
        - TEST_DEPENDS="numpy==1.17.3"
    - os: linux
      arch: arm64
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=aarch64
        - MB_ML_VER=2014
        - DOCKER_TEST_IMAGE=multibuild/xenial_{PLAT}
        - TEST_DEPENDS="numpy==1.19.5"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - TEST_DEPENDS="numpy==1.20"
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - PLAT=i686
        - TEST_DEPENDS="numpy==1.20"
    - os: linux
      arch: arm64
      env:
        - MB_PYTHON_VERSION=3.9
        - PLAT=aarch64
        - MB_ML_VER=2014
        - DOCKER_TEST_IMAGE=multibuild/xenial_{PLAT}
        - TEST_DEPENDS="numpy==1.20"

before_install:
    - BUILD_DEPENDS="wheel"
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
    # Upload wheels to anaconda for staging before PyPI, using shared
    # infrastructure at https://anaconda.org/multibuild-wheels-staging
    # The secret token is defined in the TravisCI configuration
    # https://travis-ci.org/github/biopython/biopython-wheels/settings
    # from https://anaconda.org/scipy-wheels-nightly/settings/access
    - ANACONDA_ORG="multibuild-wheels-staging";
    - ANACONDA_TOKEN=${BIOPYTHON_STAGING_UPLOAD_TOKEN};
    - python -m pip install git+https://github.com/Anaconda-Platform/anaconda-project
    - python -m pip install git+https://github.com/Anaconda-Platform/anaconda-client
    - if [ -n "${ANACONDA_TOKEN}" ] ; then
        anaconda -t ${ANACONDA_TOKEN} upload -u ${ANACONDA_ORG} --force ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl;
      else
        echo "Not uploading since token not set (expected if this is a pull request)";
      fi
